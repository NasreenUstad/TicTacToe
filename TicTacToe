import pygame
import time
from pygame.locals import *
import numpy as np

# initialize pygame
pygame.init()


# Global variables
# DEFINE CONSTANTS FOR SCREEN WIDTH AND SCREEN HEIGHT
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 400
# Grid color
primary_color = (27, 152, 120)
sec_color = (255, 255, 255)

# set winner either X or O
winner = None
# if the game has drawn 'draw' variable will be true
draw = False
XO = 'x'

# game board 3X3
TTT = np.array([[None]*3, [None]*3, [None]*3])
# TTT = np.array([[None, None, 'x'], [None, 'x', None], ['o', None, None]])
# print(TTT[0, 0])

# create the screen object
# the size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
# set up the drawing window
screen = pygame.display.set_mode([SCREEN_WIDTH,
                                  SCREEN_HEIGHT+100], 0, 32)
pygame.display.set_caption("Tic Tac Toe")

# loading the images
bg_image = pygame.image.load('images/tic tac opening.png')
x_image = pygame.image.load('images/x_img.png')
o_image = pygame.image.load('images/o_img.png')

# resizing images
x_img = pygame.transform.scale(x_image, (80, 80))
o_img = pygame.transform.scale(o_image, (80, 80))
bg_image = pygame.transform.scale(bg_image, (SCREEN_WIDTH, SCREEN_HEIGHT+100))

clock = pygame.time.Clock()

# variable to keep the main loop running
running = True


def draw_xo(row, col):
    global TTT, XO

    if row == 1:
        pos_x = 30
    if row == 2:
        pos_x = SCREEN_WIDTH/3 + 30
    if row == 3:
        pos_x = SCREEN_WIDTH/3*2 + 30

    if col == 1:
        pos_y = 30
    if col == 2:
        pos_y = SCREEN_HEIGHT/3 + 30
    if col == 3:
        pos_y = SCREEN_HEIGHT/3*2 + 30

    TTT[row-1][col-1] = XO
    if XO == 'x':
        screen.blit(x_img, (pos_y, pos_x))
        # print('x', pos_y, pos_x)
        XO = 'o'
    else:
        screen.blit(o_img, (pos_y, pos_x))
        # print('y', pos_y, pos_x)
        XO = 'x'

    pygame.display.update()


def check_winner():
    # function for checking winner or draw match
    global TTT, winner, draw

    # check for winning rows
    for row in range(0, 3):
        if TTT[row, 0] is not None and (TTT[row, 0] == TTT[row, 1] == TTT[row, 2]):
            winner = TTT[row, 0]
            pygame.draw.line(screen, (250, 0, 0), (0, (row + 1)*SCREEN_HEIGHT/3 - SCREEN_HEIGHT/6),
                             (SCREEN_WIDTH, (row + 1)*SCREEN_HEIGHT/3 - SCREEN_HEIGHT/6), 4)
            break

    # check for winning columns
    for col in range(0, 3):
        if TTT[0, col] is not None and (TTT[0, col] == TTT[1, col] == TTT[2, col]):
            winner = TTT[0, col]
            # draw winning line
            pygame.draw.line(screen, (250, 0, 0), ((col + 1) * SCREEN_WIDTH/3 - SCREEN_WIDTH/6, 0),
                             ((col + 1) * SCREEN_WIDTH/3 - SCREEN_WIDTH/6, SCREEN_HEIGHT), 4)
            break

    # check for diagonal winners
    if TTT[0, 0] is not None and (TTT[0, 0] == TTT[1, 1] == TTT[2, 2]):
        winner = TTT[0, 0]
        pygame.draw.line(screen, (250, 0, 0), (0, 0), (SCREEN_WIDTH, SCREEN_HEIGHT), 4)

    if TTT[0, 2] is not None and (TTT[0, 2] == TTT[1, 1] == TTT[2, 0]):
        winner = TTT[0, 2]
        pygame.draw.line(screen, (250, 0, 0), (SCREEN_WIDTH, 0), (0, SCREEN_HEIGHT), 4)

    if all([all(row) for row in TTT]) and winner is None:
        draw = True

    draw_status()


def user_click():
    # get the position of mouse clicked
    x, y = pygame.mouse.get_pos()

    # get column of mouse click
    if x < SCREEN_WIDTH/3:
        col = 1
    elif x < SCREEN_WIDTH/3*2:
        col = 2
    elif x < SCREEN_WIDTH:
        col = 3
    else:
        col = None

    # get row of mouse click
    if y < SCREEN_HEIGHT/3:
        row = 1
    elif y < SCREEN_HEIGHT/3*2:
        row = 2
    elif y < SCREEN_HEIGHT:
        row = 3
    else:
        row = None

    if row and col and TTT[row-1][col-1] is None:
        global XO
        # draw the x or o on screen
        draw_xo(row, col)
        check_winner()


def draw_status():
    global draw

    if winner is None:
        message = XO.upper() + "'s Turn"
    else:
        message = winner.upper() + " won!"
    if draw:
        message = "Game Draw!"

    font = pygame.font.Font(None, 30)
    text = font.render(message, 1, sec_color)

    # copy the rendered message onto the board
    screen.fill(primary_color, (0, 400, 500, 100))
    text_rect = text.get_rect(center=(SCREEN_WIDTH/2, 500-50))
    screen.blit(text, text_rect)
    pygame.display.update()


def reset_game():
    global TTT, winner, XO, draw
    time.sleep(1)
    XO = 'x'
    draw = False

    winner = None
    TTT = np.array([[None]*3, [None]*3, [None]*3])
    game_opening()


def game_opening():
    # similar to Splash screen
    # screen.blit(bg_image, (0, 0))
    screen.fill(primary_color)
    pygame.display.update()
    time.sleep(1)
    screen.fill((255, 255, 255))

    # Draw vertical lines
    pygame.draw.line(screen, primary_color,
                     (SCREEN_WIDTH/3, 0), (SCREEN_WIDTH/3, SCREEN_HEIGHT), 7)
    pygame.draw.line(screen, primary_color, (SCREEN_WIDTH/3*2, 0),
                     (SCREEN_WIDTH/3*2, SCREEN_HEIGHT), 7)

    # pygame.draw.line(screen, primary_color, (20, 70),
    #                  (50, SCREEN_HEIGHT), 7)

    # Draw horizontal lines
    pygame.draw.line(screen, primary_color,
                     (0, SCREEN_HEIGHT/3), (SCREEN_WIDTH, SCREEN_HEIGHT/3), 7)
    pygame.draw.line(screen, primary_color,
                     (0, SCREEN_HEIGHT/3*2), (SCREEN_WIDTH, SCREEN_HEIGHT/3*2), 7)

    # draw_status()
    check_winner()


game_opening()

# main loop
while running:

    # look at every event in the queue
    for event in pygame.event.get():
        if event.type == MOUSEBUTTONDOWN:
            user_click()
            if winner or draw:
                reset_game()
        # did the user hit the key?
        elif event.type == KEYDOWN:
            # was it the ESCAPE key? If so, stop the loop
            if event.key == K_ESCAPE:
                running = False

        elif event.type == QUIT:
            running = False

    # screen.blit(bg_image, (0, 0))
    pygame.display.update()
    # time.sleep(1)
    # fill the screen
    # screen.fill((71, 22, 71))

    # update the display
    pygame.display.flip()

    # ensure program maintains a rate of 30 frames per second
    clock.tick(30)

# done! time to quit
pygame.quit()



